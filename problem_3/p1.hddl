(define (problem healthcare_htn_p1)
    (:domain healthcare_htn)
    (:objects
        warehouse loc1 loc2 loc3 - location
        unit1 unit2 unit3 - medical_unit
        supply1 supply2 supply3 - supply
        box1 box2 box3 - box
        patient1 patient2 - patient
        robot1 - robot_box
        robot2 - robot_patient
        carrier1 - carrier
    )

    (:htn
        :parameters ()
        :subtasks (and
            (task0 (deliver_supply_to_unit supply1 unit1))
            (task1 (deliver_supply_to_unit supply2 unit2))
            (task2 (deliver_supply_to_unit supply3 unit3))

            (task3 (accompany_patient_to_unit patient1 unit3))
            (task4 (accompany_patient_to_unit patient2 unit1))
        )
        :ordering (and
            (task0 < task1)
            (task1 < task2)
            (task2 < task3)
            (task3 < task4)
        )
    )

    (:init
        ; Location connections
        (connected warehouse loc1)
        (connected loc1 warehouse)
        (connected loc1 loc2)
        (connected loc2 loc1)
        (connected loc2 loc3)
        (connected loc3 loc2)
        
        ; Initial locations
        (at robot1 warehouse)
        (at carrier1 warehouse)
        (at robot2 warehouse)
        (at box1 warehouse)
        (at box2 warehouse)
        (at box3 warehouse)
        (at supply1 warehouse)
        (at supply2 warehouse)
        (at supply3 warehouse)
        (at patient1 loc1)
        (at patient2 loc2)

        
        ; Unit locations
        (at unit1 loc1)
        (at unit2 loc2)
        (at unit3 loc3)
        
        ; Initial box states
        (box_unloaded box1)
        (box_unloaded box2)
        (box_unloaded box3)
        (empty box1)
        (empty box2)
        (empty box3)

        ; Initial patient states
        (patient_unloaded patient1)
        (patient_unloaded patient2)
        
        ; Initial carrier state
        (carrier_empty carrier1)
        (has_capacity_one carrier1) (has_capacity_two carrier1) (has_capacity_three carrier1)

        ; Initial robot state
        (robot_patient_empty robot2)


        ; Supply needs
        (unit_needs_supply unit1 supply1)
        (unit_needs_supply unit2 supply2)
        (unit_needs_supply unit3 supply3)

        ; Patient needs
        (patient_needs_unit patient1 unit3)
        (patient_needs_unit patient2 unit1)
    )
)

