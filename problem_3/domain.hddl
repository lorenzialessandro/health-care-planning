(define (domain health-care-htn)
    (:requirements :typing :hierachie)

    (:types
        medical-unit box content robot patient - locatable
        robot-box robot-patient - robot
        location carrier capacity-num - object
    )

    (:predicates
        ; location predicates
        (at ?o - locatable ?l - location)
        (connected ?l1 - location ?l2 - location)
        (is-central_warehouse ?l - location)
        ; box predicates
        (empty ?b - box)
        (box-has-content ?b - box ?c - content)
        ; content predicates
        (content-available ?c - content ?l - location)
        (unit-needs-content ?u - medical-unit ?c - content)
        (unit-has-content ?u - medical-unit ?c - content)
        ; patient predicates
        (patient-needs-unit ?p - patient ?u - medical-unit)
        (patient-at-unit ?p - patient ?u - medical-unit)
        ; robot-box with CARRIER predicates
        (robot-has-carrier ?r - robot ?cr - carrier)
        (box-in-carrier ?b - box ?cr - carrier)
        ; carrier capacity predicates
        (carrier-has-capacity ?cr - carrier ?n - capacity-num)
        (next-capacity ?n1 - capacity-num ?n2 - capacity-num)
        (carrier-current-capacity ?cr - carrier ?n - capacity-num)
        ; robot-patient predicates
        (robot-has-patient ?r - robot-patient ?p - patient)
    )

    ; Essential Abstract Tasks
    (:task deliver-supply
        :parameters (?c - content ?u - medical-unit)
        :precondition()
        :effect()
    )

    (:task accompany-patient
        :parameters (?p - patient ?u - medical-unit)
        :precondition()
        :effect()
    )

    (:task navigate-robot
        :parameters (?r - robot ?to - location)
        :precondition()
        :effect()
    )

    ; Methods
    (:method m-deliver-supply
        :parameters (?c - content ?u - medical-unit ?r - robot-box ?cr - carrier ?from ?to - location ?b - box ?current ?next ?max ?prev - capacity-num)
        :task (deliver-supply ?c ?u)
        :precondition (and
            (at ?u ?to)
            (robot-has-carrier ?r ?cr)
            (unit-needs-content ?u ?c)
            (empty ?b)
            (exists (?w - location)
                (and
                    (is-central_warehouse ?w)
                    (content-available ?c ?w)
                )
            )
        )
        :subtasks (and
            (task0 (navigate-robot ?r ?from)) ; move robot to warehouse
            (task1 (fill-box ?r ?cr ?b ?c ?from)) ; fill box with content
            (task2 (load-box-carrier ?r ?b ?cr ?from ?current ?next ?max)) ; load box in carrier
            (task3 (navigate-robot ?r ?to)) ; move robot to unit
            (task4 (deliver-content ?r ?cr ?b ?u ?c ?to ?next ?prev)) ; deliver content to unit
        )
        :ordering (and
            (task0 < task1)
            (task1 < task2)
            (task2 < task3)
            (task3 < task4)
        )
    )

    ; Navigation Methods
    ; separate methods for robot-box and robot-patient to avoid unnecessary checks

    (:method m-navigate-robot-box
        :parameters (?r - robot-box ?cr - carrier ?from ?to - location)
        :task (navigate-robot ?r ?to)
        :precondition (and
            (connected ?from ?to)
            (robot-has-carrier ?r ?cr)
            (at ?r ?from)
            (not (= ?from ?to))
        )
        :subtasks(and
            (task0 (move-robot-box ?r ?cr ?from ?to))
        )
    )

    (:method m-navigate-robot-patient
        :parameters (?r - robot-patient ?from ?to - location)
        :task (navigate-robot ?r ?to)
        :precondition (and
            (connected ?from ?to)
            (at ?r ?from)
            (not (= ?from ?to))
        )
        :subtasks(and
            (task0 (move-robot-patient ?r ?from ?to))
        )
    )

    (:method m-navigate-robot-box-via
        :parameters (?r - robot-box ?cr - carrier ?from ?via ?to - location)
        :task (navigate-robot ?r ?to)
        :precondition (and
            (connected ?from ?via)
            (robot-has-carrier ?r ?cr)
            (at ?r ?from)
            (not (= ?from ?to))
            (not (= ?via ?to))
            (not (= ?from ?via))
        )
        :subtasks (and
            (task0 (move-robot-box ?r ?cr ?from ?via))
            (task1 (navigate-robot ?r ?to))
        )
        :ordering (and
            (task0 < task1)
        )
    )

    (:method m-navigate-robot-patient-via
        :parameters (?r - robot-patient ?from ?via ?to - location)
        :task (navigate-robot ?r ?to)
        :precondition (and
            (connected ?from ?via)
            (at ?r ?from)
            (not (= ?from ?to))
            (not (= ?via ?to))
            (not (= ?from ?via))
        )
        :subtasks (and
            (task0 (move-robot-patient ?r ?from ?via))
            (task1 (navigate-robot ?r ?to))
        )
        :ordering (and
            (task0 < task1)
        )
    )

    (:method m-robot-box-is-there
        :parameters (?r - robot-box ?cr - carrier ?to - location)
        :task (navigate-robot ?r ?to)
        :precondition (and
            (at ?r ?to)
            (robot-has-carrier ?r ?cr)
        )
        :subtasks()
    )

    (:method m-robot-patient-is-there
        :parameters (?r - robot-patient ?to - location)
        :task (navigate-robot ?r ?to)
        :precondition (and
            (at ?r ?to)
        )
        :subtasks()
    )

    ; Accompany Patient Method

    (:method m-accompany-patient
        :parameters (?p - patient ?u - medical-unit ?r - robot-patient ?from ?to - location)
        :task (accompany-patient ?p ?u)
        :precondition (and
            (at ?u ?to)
            (patient-needs-unit ?p ?u)
        )
        :subtasks (and
            (task0 (navigate-robot ?r ?from)) ; move robot to patient
            (task1 (pick-up-patient ?r ?p ?from)) ; pick up patient
            (task2 (navigate-robot ?r ?to)) ; move robot to unit
            (task3 (deliver-patient ?r ?p ?u ?to)) ; deliver patient to unit
        )
        :ordering (and
            (task0 < task1)
            (task1 < task2)
            (task2 < task3)
        )
    )

    ; Primitive Actions
      (:action load-box-carrier
        :parameters (?r - robot-box ?b - box ?c - carrier ?l - location ?current ?next ?max - capacity-num)
        :precondition (and
            (at ?r ?l)
            (at ?b ?l)
            (robot-has-carrier ?r ?c)
            
            (or
                (not (is-central_warehouse ?l)) 
                (not (empty ?b))
            )

            (carrier-current-capacity ?c ?current)
            (next-capacity ?current ?next)
            (carrier-has-capacity ?c ?max) 

            (not (next-capacity ?current ?max)) 
        )
        :effect (and
            (box-in-carrier ?b ?c)
            (not (carrier-current-capacity ?c ?current))
            (carrier-current-capacity ?c ?next)
        )
    )


    (:action fill-box
        :parameters (?r - robot-box ?cr - carrier ?b - box ?c - content ?l - location)
        :precondition (and
            (at ?r ?l)
            (at ?b ?l)
            (robot-has-carrier ?r ?cr)
            (empty ?b)
            (content-available ?c ?l)

            (or
                (box-in-carrier ?b ?cr) 
                (not (exists (?cr2 - carrier) (box-in-carrier ?b ?cr2))) 
            )
        )
        :effect (and
            (not (empty ?b))
            (box-has-content ?b ?c)
            (not (content-available ?c ?l)) 
        )
    )

    (:action move-robot-box
        :parameters (?r - robot-box ?cr - carrier ?from - location ?to - location)
        :precondition (and
            (at ?r ?from)
            (connected ?from ?to)
            (not (= ?from ?to))
            (robot-has-carrier ?r ?cr)

            (or
                (not (is-central_warehouse ?to)) 
                (and 
                    (is-central_warehouse ?to)
                    (not (exists (?b - box)
                        (and 
                            (box-in-carrier ?b ?cr)
                            (not (empty ?b))
                        )    
                    ))
                )
            )
        )
        :effect (and
            (at ?r ?to)
            (not (at ?r ?from))

            (forall
                (?b - box)
                (when
                    (box-in-carrier ?b ?cr)
                    (and
                        (at ?b ?to)
                        (not (at ?b ?from))
                    )
                )
            )
        )
    )

    (:action deliver-content
        :parameters (?r - robot-box ?cr - carrier ?b - box ?u - medical-unit ?c - content ?l - location ?current ?prev - capacity-num)
        :precondition (and
            (at ?r ?l)
            (at ?u ?l)
            (robot-has-carrier ?r ?cr)

            (box-in-carrier ?b ?cr)
            (box-has-content ?b ?c)
            
            (unit-needs-content ?u ?c) 

            (carrier-current-capacity ?cr ?current)
            (next-capacity ?prev ?current)
            
            (not (empty ?b))
        )
        :effect (and
            (unit-has-content ?u ?c)
            (not (unit-needs-content ?u ?c))
            (not (box-has-content ?b ?c))
            (not (box-in-carrier ?b ?cr)) 

            (empty ?b)
            
            (not (carrier-current-capacity ?cr ?current))
            (carrier-current-capacity ?cr ?prev)
        )
    )

    (:action pick-up-patient
        :parameters (?r - robot-patient ?p - patient ?l - location)
        :precondition (and
            (at ?r ?l)
            (at ?p ?l)
            
            (not (exists
                    (?p2 - patient)
                    (robot-has-patient ?r ?p2)))

            (not (exists
                    (?r2 - robot-patient)
                    (robot-has-patient ?r2 ?p)))
        )
        :effect (and
            (robot-has-patient ?r ?p)
        )
    )

    (:action move-robot-patient
        :parameters (?r - robot-patient ?from - location ?to - location)
        :precondition (and
            (at ?r ?from)
            (connected ?from ?to)
        )
        :effect (and
            (at ?r ?to)
            (not (at ?r ?from))
            
            (forall
                (?p - patient)
                (when
                    (robot-has-patient ?r ?p)
                    (and
                        (at ?p ?to)
                        (not (at ?p ?from))
                    )
                )
            )
        )
    )

    (:action deliver-patient
        :parameters (?r - robot-patient ?p - patient ?u - medical-unit ?l - location)
        :precondition (and
            (at ?r ?l)
            (at ?p ?l)
            (at ?u ?l)
            (patient-needs-unit ?p ?u)
            (robot-has-patient ?r ?p)
        )
        :effect (and
            (patient-at-unit ?p ?u)
            (not (patient-needs-unit ?p ?u))
            (not (robot-has-patient ?r ?p))
        )
    )
)