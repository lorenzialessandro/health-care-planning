(define (domain healthcare_htn)
    (:requirements :typing :hierachie)
    (:types
        medical_unit box supply robot carrier patient - locatable
        robot_box robot_patient - robot
        location - object
    )

    (:predicates
        ; Location predicates
        (at ?o - locatable ?l - location)
        (connected ?l1 - location ?l2 - location)
        
        ; Box predicates
        (box_loaded_in_carrier ?b - box ?c - carrier)
        (box_unloaded ?b - box)
        (empty ?b - box)
        (box_has_supply ?b - box ?s - supply)
        
        ; Unit predicates
        (unit_needs_supply ?u - medical_unit ?s - supply)
        (unit_has_supply ?u - medical_unit ?s - supply)
        
        ; Carrier capacity tracking
        (has_one_box ?c - carrier)
        (has_two_boxes ?c - carrier)
        (has_three_boxes ?c - carrier)
        
        (carrier_empty ?c - carrier)
        
        (has_capacity_one ?c - carrier)
        (has_capacity_two ?c - carrier)
        (has_capacity_three ?c - carrier)

        ; Patient predicates
        (patient_unloaded ?p - patient)
        (patient_loaded_in_robot ?p - patient ?r - robot_patient)
        (patient_needs_unit ?p - patient ?u - medical_unit)
        (patient_at_unit ?p - patient ?u - medical_unit)

        ; Robot patient predicates
        (robot_patient_empty ?r - robot_patient)
        
    )

    ; Essential Abstract Tasks
    (:task deliver_supply_to_unit
        :parameters (?s - supply ?u - medical_unit)
        :precondition ()
        :effect ()
    )

    (:task accompany_patient_to_unit
        :parameters (?p - patient ?u - medical_unit)
        :precondition ()
        :effect ()
    )

    (:task navigate_carrier
        :parameters (?r - robot_box ?c - carrier ?l - location)
        :precondition ()
        :effect ()
    )

    (:task navigate_robot_patient
        :parameters (?r - robot_patient ?l - location)
        :precondition ()
        :effect ()
    )
    

    ; Methods

    ; Accompany a patient to unit
    (:method m_accompany_patient
        :parameters (?p - patient ?u - medical_unit ?r - robot_patient ?l1 ?l2 - location)
        :task (accompany_patient_to_unit ?p ?u)
        :precondition (and
            (at ?p ?l1)
            (at ?u ?l2)
            (patient_needs_unit ?p ?u)
            (robot_patient_empty ?r)
        )
        :subtasks (and
            (task0 (navigate_robot_patient ?r ?l1))     ; move robot to patient
            (task1 (pick_up_patient ?r ?p ?l1))         ; pick up patient
            (task2 (navigate_robot_patient ?r ?l2))     ; move robot to unit
            (task3 (drop_off_patient ?r ?p ?l2))        ; drop off patient
            (task4 (deliver_patient ?r ?p ?l2 ?u))      ; deliver patient to unit
        )
        :ordering (and
            (task0 < task1) (task1 < task2) (task2 < task3) (task3 < task4)
        )
    )

    ; Deliver one supply to unit
    (:method m_deliver_supply_one
        :parameters (?s - supply ?u - medical_unit ?r - robot_box ?c - carrier ?b - box ?l1 ?l2 - location)
        :task (deliver_supply_to_unit ?s ?u)
        :precondition (and
            (at ?s ?l1)
            (at ?u ?l2)
            (unit_needs_supply ?u ?s)
            (carrier_empty ?c)
            (has_capacity_one ?c)
            (empty ?b)
        )
        :subtasks (and
            (task0 (navigate_carrier ?r ?c ?l1))        ; move robot to where the supply is (warehouse)
            (task1 (fill_box ?r ?b ?l1 ?s))             ; fill the box with the supply
            (task2 (load_first_box ?r ?c ?b ?l1))       ; load the box into the carrier
            (task3 (navigate_carrier ?r ?c ?l2))        ; move the carrier to the unit
            (task4 (unload_one_box ?r ?c ?b ?l2))       ; unload the box at the unit
            (task5 (deliver_supply ?r ?b ?l2 ?s ?u))    ; deliver the supply to the unit
        )
        :ordering (and
            (task0 < task1)
            (task1 < task2)
            (task2 < task3)
            (task3 < task4)
            (task4 < task5)
        )
    )

    ; When carrier has one box, add another supply and deliver to unit
    (:method m_deliver_supply_add_to_one
        :parameters (?s - supply ?u - medical_unit ?r - robot_box ?c - carrier 
                    ?b - box ?b_loaded - box ?l1 ?l2 - location)
        :task (deliver_supply_to_unit ?s ?u)
        :precondition (and
            (at ?s ?l1)
            (at ?u ?l2)
            (unit_needs_supply ?u ?s)
            (has_one_box ?c)
            (has_capacity_two ?c)
            (empty ?b)
            (box_loaded_in_carrier ?b_loaded ?c)
        )
        :subtasks (and
            (task0 (navigate_carrier ?r ?c ?l1))
            (task1 (fill_box ?r ?b ?l1 ?s))
            (task2 (load_second_box ?r ?c ?b ?b_loaded ?l1))
            (task3 (navigate_carrier ?r ?c ?l2))
            (task4 (unload_from_two ?r ?c ?b ?l2))
            (task5 (deliver_supply ?r ?b ?l2 ?s ?u))
        )
        :ordering (and
            (task0 < task1) (task1 < task2) (task2 < task3)
            (task3 < task4) (task4 < task5)
        )
    )

    ; When carrier has two boxes, add another supply and deliver to unit
    (:method m_deliver_supply_add_to_two
        :parameters (?s - supply ?u - medical_unit ?r - robot_box ?c - carrier 
                    ?b - box ?b_loaded1 ?b_loaded2 - box ?l1 ?l2 - location)
        :task (deliver_supply_to_unit ?s ?u)
        :precondition (and
            (at ?s ?l1)
            (at ?u ?l2)
            (unit_needs_supply ?u ?s)
            (has_two_boxes ?c)
            (has_capacity_three ?c)
            (empty ?b)
            (box_loaded_in_carrier ?b_loaded1 ?c)
            (box_loaded_in_carrier ?b_loaded2 ?c)
        )
        :subtasks (and
            (task0 (navigate_carrier ?r ?c ?l1))
            (task1 (fill_box ?r ?b ?l1 ?s))
            (task2 (load_third_box ?r ?c ?b ?b_loaded1 ?b_loaded2 ?l1))
            (task3 (navigate_carrier ?r ?c ?l2))
            (task4 (unload_from_three ?r ?c ?b ?l2))
            (task5 (deliver_supply ?r ?b ?l2 ?s ?u))
        )
        :ordering (and
            (task0 < task1) (task1 < task2) (task2 < task3)
            (task3 < task4) (task4 < task5)
        )
    )

    ; Move empty robot_patient to location (direct and via methods)
    (:method m_navigate_empty_robot_patient_direct
        :parameters (?r - robot_patient ?l1 ?l2 - location)
        :task (navigate_robot_patient ?r ?l2)
        :precondition (and
            (at ?r ?l1)
            (robot_patient_empty ?r)
            (connected ?l1 ?l2)
        )
        :subtasks (and
            (task0 (move_empty_robot_patient ?r ?l1 ?l2))
        )
    )

    (:method m_navigate_empty_robot_patient_via
        :parameters (?r - robot_patient ?l1 ?l2 ?l3 - location)
        :task (navigate_robot_patient ?r ?l3)
        :precondition (and
            (at ?r ?l1)
            (robot_patient_empty ?r)
            (connected ?l1 ?l2)
        )
        :subtasks (and
            (task0 (move_empty_robot_patient ?r ?l1 ?l2))
            (task1 (navigate_robot_patient ?r ?l3))
        )
        :ordering (and
            (task0 < task1)
        )
    )

    ; Check if robot_patient is already at location
    (:method m_robot_patient_is_already_there
        :parameters (?r - robot_patient ?l - location)
        :task (navigate_robot_patient ?r ?l)
        :precondition (and
            (at ?r ?l)
        )
        :subtasks ()
    )

    ; Move robot_patient with patient to location (direct and via methods)
    (:method m_navigate_robot_patient_direct
        :parameters (?r - robot_patient ?p - patient ?l1 ?l2 - location)
        :task (navigate_robot_patient ?r ?l2)
        :precondition (and
            (at ?r ?l1)
            (at ?p ?l1)
            (patient_loaded_in_robot ?p ?r)
            (connected ?l1 ?l2)
        )
        :subtasks (and
            (task0 (move_robot_with_patient ?r ?p ?l1 ?l2))
        )
    )

    (:method m_navigate_robot_patient_via
        :parameters (?r - robot_patient ?p - patient ?l1 ?l2 ?l3 - location)
        :task (navigate_robot_patient ?r ?l3)
        :precondition (and
            (at ?r ?l1)
            (at ?p ?l1)
            (patient_loaded_in_robot ?p ?r)
            (connected ?l1 ?l2)
        )
        :subtasks (and
            (task0 (move_robot_with_patient ?r ?p ?l1 ?l2))
            (task1 (navigate_robot_patient ?r ?l3))
        )
        :ordering (and
            (task0 < task1)
        )
    )
    

    ; Move empty carrier to location (direct and via methods)

    (:method m_navigate_empty_carrier_direct
        :parameters (?r - robot_box ?c - carrier ?l1 ?l2 - location)
        :task (navigate_carrier ?r ?c ?l2)
        :precondition (and
            (at ?r ?l1)
            (at ?c ?l1)
            (connected ?l1 ?l2)
            (carrier_empty ?c)
        )
        :subtasks (and
            (task0 (move_empty_carrier ?r ?c ?l1 ?l2))
        )
    )

    (:method m_navigate_empty_carrier_via
        :parameters (?r - robot_box ?c - carrier ?l1 ?l2 ?l3 - location)
        :task (navigate_carrier ?r ?c ?l3)
        :precondition (and
            (at ?r ?l1)
            (at ?c ?l1)
            (connected ?l1 ?l2)
            (carrier_empty ?c)
        )
        :subtasks (and
            (task0 (move_empty_carrier ?r ?c ?l1 ?l2))
            (task1 (navigate_carrier ?r ?c ?l3))
        )
        :ordering (and
            (task0 < task1)
        )
    )

    ; Check if carrier is already at location
    (:method m_carrier_is_already_there
        :parameters (?r - robot_box ?c - carrier ?l - location)
        :task (navigate_carrier ?r ?c ?l)
        :precondition (and
            (at ?r ?l)
            (at ?c ?l)
        )
        :subtasks ()
    )

    ; Move carrier to location
    ; implement for 1, 2, 3 boxes (direct and via methods) - can be easily extended to more boxes

    (:method m_navigate_carrier_1_direct
        :parameters (?r - robot_box ?c - carrier ?b - box ?l1 ?l2 - location)
        :task (navigate_carrier ?r ?c ?l2)
        :precondition (and
            (at ?r ?l1)
            (at ?c ?l1)
            (has_one_box ?c)
            (connected ?l1 ?l2)
            (box_loaded_in_carrier ?b ?c)
        )
        :subtasks (and
            (task0 (move_carrier_one_box ?r ?c ?b ?l1 ?l2))
        )
    ) 

    (:method m_navigate_carrier_1_via
        :parameters (?r - robot_box ?c - carrier ?b - box ?l1 ?l2 ?l3 - location)
        :task (navigate_carrier ?r ?c ?l3)
        :precondition (and
            (at ?r ?l1)
            (at ?c ?l1)
            (has_one_box ?c)
            (connected ?l1 ?l2)
            (box_loaded_in_carrier ?b ?c)
        )
        :subtasks (and
            (task0 (move_carrier_one_box ?r ?c ?b ?l1 ?l2))
            (task1 (navigate_carrier ?r ?c ?l3))
        )
        :ordering (and
            (task0 < task1)
        )
    )

    (:method m_navigate_carrier_2_direct
        :parameters (?r - robot_box ?c - carrier ?b1 - box ?b2 - box ?l1 ?l2 - location)
        :task (navigate_carrier ?r ?c ?l2)
        :precondition (and
            (at ?r ?l1)
            (at ?c ?l1)
            (has_two_boxes ?c)
            (connected ?l1 ?l2)
            (box_loaded_in_carrier ?b1 ?c)
            (box_loaded_in_carrier ?b2 ?c)
        )
        :subtasks (and
            (task0 (move_carrier_two_boxes ?r ?c ?b1 ?b2 ?l1 ?l2))
        )
    )

    (:method m_navigate_carrier_2_via
        :parameters (?r - robot_box ?c - carrier ?b1 - box ?b2 - box ?l1 ?l2 ?l3 - location)
        :task (navigate_carrier ?r ?c ?l3)
        :precondition (and
            (at ?r ?l1)
            (at ?c ?l1)
            (has_two_boxes ?c)
            (connected ?l1 ?l2)
            (box_loaded_in_carrier ?b1 ?c)
            (box_loaded_in_carrier ?b2 ?c)
        )
        :subtasks (and
            (task0 (move_carrier_two_boxes ?r ?c ?b1 ?b2 ?l1 ?l2))
            (task1 (navigate_carrier ?r ?c ?l3))
        )
        :ordering (and
            (task0 < task1)
        )
    )

    (:method m_navigate_carrier_3_direct
        :parameters (?r - robot_box ?c - carrier ?b1 - box ?b2 - box ?b3 - box ?l1 ?l2 - location)
        :task (navigate_carrier ?r ?c ?l2)
        :precondition (and
            (at ?r ?l1)
            (at ?c ?l1)
            (has_three_boxes ?c)
            (connected ?l1 ?l2)
            (box_loaded_in_carrier ?b1 ?c)
            (box_loaded_in_carrier ?b2 ?c)
            (box_loaded_in_carrier ?b3 ?c)
        )
        :subtasks (and
            (task0 (move_carrier_three_boxes ?r ?c ?b1 ?b2 ?b3 ?l1 ?l2))
        )
    )

    (:method m_navigate_carrier_3_via
        :parameters (?r - robot_box ?c - carrier ?b1 - box ?b2 - box ?b3 - box ?l1 ?l2 ?l3 - location)
        :task (navigate_carrier ?r ?c ?l3)
        :precondition (and
            (at ?r ?l1)
            (at ?c ?l1)
            (has_three_boxes ?c)
            (connected ?l1 ?l2)
            (box_loaded_in_carrier ?b1 ?c)
            (box_loaded_in_carrier ?b2 ?c)
            (box_loaded_in_carrier ?b3 ?c)
        )
        :subtasks (and
            (task0 (move_carrier_three_boxes ?r ?c ?b1 ?b2 ?b3 ?l1 ?l2))
            (task1 (navigate_carrier ?r ?c ?l3))
        )
        :ordering (and
            (task0 < task1)
        )
    )

    
    

    ; Primitive Actions 
    
    ; Fill box with supply
    (:action fill_box
        :parameters (?r - robot_box ?b - box ?l - location ?s - supply)
        :precondition (and
            (at ?r ?l)
            (at ?b ?l)
            (at ?s ?l)
            (box_unloaded ?b)
            (empty ?b)
        )
        :effect (and 
            (not (empty ?b))
            (box_has_supply ?b ?s)
        )
    )

    ; Deliver supply to unit
    (:action deliver_supply
        :parameters (?r - robot_box ?b - box ?l - location ?s - supply ?u - medical_unit)
        :precondition (and
            (at ?r ?l)
            (at ?b ?l)
            (at ?u ?l)
            (box_has_supply ?b ?s)
            (box_unloaded ?b)
            (unit_needs_supply ?u ?s)
        )
        :effect (and
            (not (box_has_supply ?b ?s))
            (empty ?b)
            (not (unit_needs_supply ?u ?s))
            (unit_has_supply ?u ?s)
        )
    )

    ; Pick up patient
    (:action pick_up_patient
        :parameters (?r - robot_patient ?p - patient ?l - location)
        :precondition (and
            (at ?r ?l)
            (at ?p ?l)
            
            (patient_unloaded ?p)
            (robot_patient_empty ?r)
        )
        :effect (and 
            (not (patient_unloaded ?p))
            (patient_loaded_in_robot ?p ?r)
            (not (robot_patient_empty ?r))
        )
    )

    ; Drop off patient
    (:action drop_off_patient
        :parameters (?r - robot_patient ?p - patient ?l - location)
        :precondition (and
            (at ?r ?l)
            (at ?p ?l)
            (patient_loaded_in_robot ?p ?r)
        )
        :effect (and 
            (patient_unloaded ?p)
            (not (patient_loaded_in_robot ?p ?r))
            (robot_patient_empty ?r)
            (at ?p ?l)
         )
    )

    ; Deliver patient to unit
    (:action deliver_patient
        :parameters (?r - robot_patient ?p - patient ?l - location ?u - medical_unit)
        :precondition (and
            (at ?r ?l)
            (at ?p ?l)
            (at ?u ?l)

            (patient_unloaded ?p)
            (patient_needs_unit ?p ?u)
        )
        :effect (and
            (not (patient_needs_unit ?p ?u))
            (patient_at_unit ?p ?u)
        )
    )


    ; Movement Patients

    (:action move_empty_robot_patient
        :parameters (?r - robot_patient ?l1 - location ?l2 - location)
        :precondition (and
            (at ?r ?l1)
            (connected ?l1 ?l2)
            (robot_patient_empty ?r)
        )
        :effect (and 
            (not (at ?r ?l1))
            (at ?r ?l2)
        )
    )

    (:action move_robot_with_patient
        :parameters (?r - robot_patient ?p - patient ?l1 - location ?l2 - location)
        :precondition (and
            (at ?r ?l1)
            (connected ?l1 ?l2)
            (patient_loaded_in_robot ?p ?r)
        )
        :effect (and 
            (not (at ?r ?l1))
            (not (at ?p ?l1))
            (at ?r ?l2)
            (at ?p ?l2)
        )
    )

    ; Load operations
    (:action load_first_box
        :parameters (?r - robot_box ?c - carrier ?b - box ?l - location)
        :precondition (and
            (at ?r ?l)
            (at ?c ?l)
            (at ?b ?l)
            (box_unloaded ?b)
            (carrier_empty ?c)
            (has_capacity_one ?c)
        )
        :effect (and 
            (not (box_unloaded ?b))
            (box_loaded_in_carrier ?b ?c)
            (not (carrier_empty ?c))
            (has_one_box ?c)
        )
    )

    (:action load_second_box
        :parameters (?r - robot_box ?c - carrier ?b - box ?lb1 - box ?l - location)
        :precondition (and
            (at ?r ?l)
            (at ?c ?l)
            (at ?b ?l)
            (box_unloaded ?b)
            (has_one_box ?c)
            (has_capacity_two ?c)
            (box_loaded_in_carrier ?lb1 ?c)
        )
        :effect (and 
            (not (box_unloaded ?b))
            (box_loaded_in_carrier ?b ?c)
            (not (has_one_box ?c))
            (has_two_boxes ?c)
        )
    )

    (:action load_third_box
        :parameters (?r - robot_box ?c - carrier ?b - box  ?lb1 ?lb2 - box ?l - location)
        :precondition (and
            (at ?r ?l)
            (at ?c ?l)
            (at ?b ?l)
            (box_unloaded ?b)
            (has_two_boxes ?c)
            (has_capacity_three ?c)
            (box_loaded_in_carrier ?lb1 ?c)
            (box_loaded_in_carrier ?lb2 ?c)
        )
        :effect (and 
            (not (box_unloaded ?b))
            (box_loaded_in_carrier ?b ?c)
            (not (has_two_boxes ?c))
            (has_three_boxes ?c)
       )
    )

    ; Unload operations
    (:action unload_one_box
        :parameters (?r - robot_box ?c - carrier ?b - box ?l - location)
        :precondition (and
            (at ?r ?l)
            (at ?c ?l)
            (box_loaded_in_carrier ?b ?c)
            (has_one_box ?c)
        )
        :effect (and 
            (box_unloaded ?b)
            (not (box_loaded_in_carrier ?b ?c))
            (not (has_one_box ?c))
            (carrier_empty ?c)
            (at ?b ?l)
         )
    )

    (:action unload_from_two
        :parameters (?r - robot_box ?c - carrier ?b - box ?l - location)
        :precondition (and
            (at ?r ?l)
            (at ?c ?l)
            (box_loaded_in_carrier ?b ?c)
            (has_two_boxes ?c)
        )
        :effect (and 
            (box_unloaded ?b)
            (not (box_loaded_in_carrier ?b ?c))
            (not (has_two_boxes ?c))
            (has_one_box ?c)
            (at ?b ?l)
         )
    )

    (:action unload_from_three
        :parameters (?r - robot_box ?c - carrier ?b - box ?l - location)
        :precondition (and
            (at ?r ?l)
            (at ?c ?l)
            (box_loaded_in_carrier ?b ?c)
            (has_three_boxes ?c)
        )
        :effect (and 
            (box_unloaded ?b)
            (not (box_loaded_in_carrier ?b ?c))
            (not (has_three_boxes ?c))
            (has_two_boxes ?c)
            (at ?b ?l)
        )
    )

    ; Movement operations

    (:action move_empty_carrier
        :parameters (?r - robot_box ?c - carrier ?l1 - location ?l2 - location)
        :precondition (and
            (at ?r ?l1)
            (at ?c ?l1)
            (connected ?l1 ?l2)
            (carrier_empty ?c)
        )
        :effect (and 
            (not (at ?r ?l1))
            (not (at ?c ?l1))
            (at ?r ?l2)
            (at ?c ?l2)
        )
    )

    (:action move_carrier_one_box
        :parameters (?r - robot_box ?c - carrier ?b - box ?l1 - location ?l2 - location)
        :precondition (and
            (at ?r ?l1)
            (at ?c ?l1)
            (connected ?l1 ?l2)
            (has_one_box ?c)
            (box_loaded_in_carrier ?b ?c)
        )
        :effect (and 
            (not (at ?r ?l1))
            (not (at ?c ?l1))
            (not (at ?b ?l1))
            (at ?r ?l2)
            (at ?c ?l2)
            (at ?b ?l2)
        )
    )

    (:action move_carrier_two_boxes
        :parameters (?r - robot_box ?c - carrier ?b1 - box ?b2 - box ?l1 - location ?l2 - location)
        :precondition (and
            (at ?r ?l1)
            (at ?c ?l1)
            (connected ?l1 ?l2)
            (has_two_boxes ?c)
            (box_loaded_in_carrier ?b1 ?c)
            (box_loaded_in_carrier ?b2 ?c)
        )
        :effect (and 
            (not (at ?r ?l1))
            (not (at ?c ?l1))
            (not (at ?b1 ?l1))
            (not (at ?b2 ?l1))
            (at ?r ?l2)
            (at ?c ?l2)
            (at ?b1 ?l2)
            (at ?b2 ?l2)
        )
    )

    (:action move_carrier_three_boxes
        :parameters (?r - robot_box ?c - carrier ?b1 - box ?b2 - box ?b3 - box ?l1 - location ?l2 - location)
        :precondition (and
            (at ?r ?l1)
            (at ?c ?l1)
            (connected ?l1 ?l2)
            (has_three_boxes ?c)
            (box_loaded_in_carrier ?b1 ?c)
            (box_loaded_in_carrier ?b2 ?c)
            (box_loaded_in_carrier ?b3 ?c)
        )
        :effect (and 
            (not (at ?r ?l1))
            (not (at ?c ?l1))
            (not (at ?b1 ?l1))
            (not (at ?b2 ?l1))
            (not (at ?b3 ?l1))
            (at ?r ?l2)
            (at ?c ?l2)
            (at ?b1 ?l2)
            (at ?b2 ?l2)
            (at ?b3 ?l2)
          )
    )
)